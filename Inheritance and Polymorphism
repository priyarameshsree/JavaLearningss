#1st class
package javaPractice;

public class ConceptofInheritance extends CarModel{
	public void CarStart() {
		System.out.println("Car started");
	}
	public void CarStop() {
		System.out.println("CarStopped");
	}
	public void wheels() {
		System.out.println("Car have fourweels");
	}

}
#2nd class
package javaPractice;

public class Conceptcar2 extends ConceptofInheritance {
	public void CarStart() {
		System.out.println("Car Start without petrol");
	}
	public void CarStop() {
		System.out.println("Car Stop automatically");
	}
	public void CarAccess() {
		System.out.println("Carfunction fully in computerized");
	}

}
#3 rd class
package javaPractice;

public class Audicar extends ConceptofInheritance {
public void Design() {
	System.out.println("Car design nice");

}
public void CarSpeed() {
	System.out.println("it rocks more");
	
}
public void CarStart() {
	System.out.println("give the command using mic");
}
}
#4th class
package javaPractice;

public class CarModel {
	public void Carcolour() {
		System.out.println("Black");
	}
	public void CarCost() {
		System.out.println("Highbudget");
		
	}

}
#Main class
package javaPractice;

public class CarMain {//has a relationship

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Audicar ac=new Audicar();
		ac.CarSpeed();
		ac.CarStart();
		ac.Design();
		ac.wheels();
		ac.Carcolour();
		ac.CarCost();
		System.out.println("**********************");
		//inheritance function used conceptcar2 child class extends the parent class of conceptofinheritance
		//at the same time method overriding done here.Same method name ,same argument having parent and child means it gives the priority for child class--its called method overriding
		//compile time polymorphism or static time polymorphism

		Conceptcar2 cc=new Conceptcar2();
		cc.CarAccess();
		cc.CarStart();
		cc.CarStop();
		cc.wheels();
		cc.Carcolour();
		cc.CarCost();
		cc.CarAccess();
		System.out.println("*************");
		//topcasting
		//child class object can be refered by parent class objectreference variable  is called dynamic polymorphism or run time polymorphism
		ConceptofInheritance co=new Audicar();
		co.CarStart();
		co.CarStop();
		co.wheels();
		co.Carcolour();
		co.CarCost();
		
		//common method and over ridden method only accessable in run time polymorphism
		//downcasting
		//Audicar ac1=(Audicar) new ConceptofInheritance();
		//Audicar is the child class and ac1 is child class object reference variable
		//conceptofInheritance is parent class now not able to access.so do downcasting put the child class name in inside the bracket(it is called casting)

}}

//parent class
package javaPractice;

public class Animal {
	public void makeSound() {
		System.out.println("The animales make sound");
	}

}
//child class
package javaPractice;

public class Animal1 extends Animal {
	public void makeSound() {
		System.out.println("This is from cat class");
	}
	public void cat_sound() {
		System.out.println("This is own method of cat class");
	}

}
//Main class
package javaPractice;

public class AnimalDriver {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Animal obj=new Animal();//creating the object for parent class
		obj.makeSound();
		Animal1 obj1=new Animal1();
		obj1.makeSound();
		obj1.cat_sound();
		Animal obj2=new Animal1();//parent class refer the child class
		obj2.makeSound();//give the method value for child class..but not able to access own method of child class
		Animal1 obj3=(Animal1) new Animal();//downcasting
		obj3.makeSound();
	}

}
//inheritance  parent class
package inheritance;

public class Employee1 {
	int salary;
	String ename;
	String designation;
	public void work(String ename,String designation) {
		this.ename=ename;
		this.designation=designation;
		System.out.println("Employee work");
		
		
	}
	public int getSalary(int salary) {
		this.salary=salary;
		return salary;
	}

}
//child class
package inheritance;

public class Hrmanager extends Employee1 {
String	hname;
String hdesignation;
int hsalary;
	
	public void work(String ename,String designation) {
		this.ename=ename;
		this.designation=designation;
		System.out.println("Maintain the workfrom hr side");
	}
	public int getSalary(int salary) {
		this.salary=salary;
		return salary;
	}
 public void AddEmployee(String hname,String hdesignation,int hsalary) {
	this.hname=hname;
	this.hsalary=hsalary;
	this.hdesignation=hdesignation;
	System.out.println("Adding new Employeees are");
	 
 }

}
//main method
package inheritance;

public class EmployeeDriver {

	public static void main(String[] args) {
		Employee1 emp=new Employee1();
		emp.work("Siddhu", "Developer");
	System.out.println("The employee name is"+emp.ename +""+emp.designation);
	int sal=emp.getSalary(60000);
	System.out.println("The employee salary is:"+sal);
	
	Hrmanager hr=new Hrmanager();
	hr.work("Hari", "HRmanager");
	int salry=hr.getSalary(80000);
	System.out.println(salry);
	System.out.println("*********************");
	
	hr.AddEmployee("Helen", "HRm", 500000);
	System.out.println("new employeename\t"   +hr.hname +"\t" +"Desig\t" +hr.hdesignation+ "\tSalary\t" +" "+hr.hsalary);
	
	
	
	

	}

}
//Using Bank account --parent class
package inheritance;

public class Bank {
	private int acno;
	private int balance;
	public  Bank(int acno,int balance) {
		this.acno=acno;
		this.balance=balance;
	}
	
	public int deposit(int Dep_amount) {
		
		balance+=Dep_amount;
		return balance;
		
	}
	public void withdraw(int amount) {
		if(balance>amount) {
			balance-=amount;}
		else {
			System.out.println("insufficient balance");
		}
	}
	
	public int getbalance() {
		return balance;
	}
	}
//child class
package inheritance;

public class SavingsAccount extends Bank{
	public SavingsAccount(int acno,int balance) {
		super(acno,balance);
	}
	public  void withdraw(int amount) {
	if(getbalance()-amount<100) {
		System.out.println("Please main tain the minimum balance");
		
	}
	else {
		super.withdraw(amount);
		
	}
		
	}
	
		
	}


//main class
package inheritance;

public class BankDriver {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Bank b=new Bank(123456789, 5500);
		//int depositamt=b.deposit(5500);
		System.out.println("Account balance is"+b.getbalance());
		System.out.println("Deposit Amount for acno");
		int depositamt=b.deposit(2000);
		System.out.println("After depositing the amount of 2000 the balance is"+depositamt);
		
		
		System.out.println("Withdrawal amount");
		b.withdraw(10000);
		System.out.println("After withdraw the amount of 1000 rs from 7500 is"+b.getbalance());
		
		SavingsAccount s1=new SavingsAccount(23456787,100) ;
		s1.withdraw(500);
		}
		
		

	}
//output
---------
Account balance is5500
Deposit Amount for acno
After depositing the amount of 2000 the balance is7500
Withdrawal amount
insufficient balance
After withdraw the amount of 1000 rs from 7500 is7500
Please main tain the minimum balance







